# This is a simplified configuration is a simplified example of how to use ssl on front
# and backends with additional certificates loaded from a directory for SNI
# capable clients.

global
	maxconn 32768
	tune.bufsize 32768
	tune.ssl.default-dh-param 2048
	ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
  	ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
  	ssl-default-server-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
  	ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11


defaults
	mode http
	timeout connect 5s
	timeout client 5s
	timeout server 5s
	


#Pure HTTP
listen haproxy-http
	mode http
	bind :82
	server varnish varnish:80
	stats enable  # Enable stats page
    stats uri /status  # Stats URI
	
#HTTPS 
listen haproxy-https
	mode http
	bind :445 ssl crt /etc/ssl-managed/self-signed.pem alpn h2,http/1.1
	server varnish varnish:80

#HTTPS with proxy-protocol
listen haproxy-https-proxy-protocol
	mode http
	bind :446 ssl crt /etc/ssl-managed/self-signed.pem alpn h2,http/1.1
	server varnish-proxyproto varnish:81 check send-proxy-v2

#HTTPS with unix sockets and proxy-protocol
listen haproxy-https-socket-proxy-protocol
	mode http
	bind :447 ssl crt /etc/ssl-managed/self-signed.pem alpn h2,http/1.1
	server varnish-unix /tmp/run/varnish.sock send-proxy-v2

#HTTPS TCP woth proxy protocol
listen haproxy-tcp-socket
	mode tcp
	bind :448 ssl crt /etc/ssl-managed/self-signed.pem alpn h2,http/1.1
	server varnish-unix /tmp/run/varnish.sock send-proxy-v2