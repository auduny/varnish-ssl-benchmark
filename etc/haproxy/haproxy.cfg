# This is a simplified configuration is a simplified example of how to use ssl on front
# and backends with additional certificates loaded from a directory for SNI
# capable clients.

global
	maxconn 200000
	tune.bufsize 32768
	tune.ssl.default-dh-param 2048
	ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
  	ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
  	ssl-default-server-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
  	ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11
   	nbthread 32
        # mapped to the first 12 CPU cores (with more then 17 cpus haproxy segfaults, with 16 cpus we have a high rate of ssl errors)
        cpu-map auto:1/1-32 0-31


defaults
	mode http
	timeout connect 5s
	timeout client 5s
	timeout server 5s
	


#Pure HTTP
listen haproxy-http
	mode http
	bind :8084
	server varnish 127.0.0.1:8081
	stats enable  # Enable stats page
    stats uri /status  # Stats URI
	
#HTTPS 
listen haproxy-https
	mode http
	bind :8445 ssl crt /etc/ssl-managed/self-signed.pem alpn h2,http/1.1
	server varnish 127.0.0.1:8081

#HTTPS with proxy-protocol
listen haproxy-https-proxy-protocol
	mode http
	bind :8446 ssl crt /etc/ssl-managed/self-signed.pem alpn h2,http/1.1
	server varnish-proxyproto 127.0.0.1:8082 check send-proxy-v2

#HTTPS with unix sockets
listen haproxy-https-socket-proxy-protocol
	mode http
	bind :8447 ssl crt /etc/ssl-managed/self-signed.pem alpn h2,http/1.1
	server varnish-unix /tmp/run/varnish.sock

#HTTPS TCP with proxy protocol
listen haproxy-tcp-socket
	mode tcp
	bind :8448 ssl crt /etc/ssl-managed/self-signed.pem alpn h2,http/1.1
	server varnish-unix /tmp/run/varnish-proxy.sock send-proxy-v2
